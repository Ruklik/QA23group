{
	"info": {
		"_postman_id": "7f8e3c8b-0f93-44bf-94fd-cbe42e51cd1a",
		"name": "HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resp = pm.response;\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    resp.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"    pm.test(\"String is correct\", function () {\r",
							"       resp.to.have.body(\"This is the first responce from server!\");\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resp = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Your name is Nastya\", function () {\r",
							"    pm.expect(resp.name).to.eql(\"Nastya\");\r",
							"});\r",
							"\r",
							"pm.test(\"Your age is 29\", function () {\r",
							"    pm.expect(+resp.age).to.eql(29);\r",
							"});\r",
							"\r",
							"pm.test(\"Your salary is 1000\", function () {\r",
							"    pm.expect(resp.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"var req = request.data;\r",
							"\r",
							"pm.test(\"Your name is OK\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Your age is OK\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"pm.test(\"Your salary is OK\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"console.log(\"Family =\" , resp.family);\r",
							"\r",
							"\r",
							"pm.test(\"Your u_salary is salary*4\", function () {\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nastya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var resp = pm.response.json();\r",
							"\r",
							"//второй вариант спарсить request:\r",
							"//var query = {};\r",
							"//pm.request.url.query.all().forEach((param) => { query[param.key] = param.value}); \r",
							"\r",
							"\r",
							"pm.test(\"Your name is OK\", function () {\r",
							"    pm.expect(resp.name).to.eql( pm.request.url.query.get(\"name\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Your age is OK\", function () {\r",
							"    pm.expect(resp.age).to.eql(pm.request.url.query.get(\"age\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Your salary is OK\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+pm.request.url.query.get(\"salary\"));\r",
							"});\r",
							"console.log(resp.family);\r",
							"\r",
							"pm.test('Param Dog has name', function() {\r",
							"  pm.expect(resp.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"pm.test('Param Dog has age', function() {\r",
							"  pm.expect(resp.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"pm.test(\"Name is Luky\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Dog's age is 4\", function () {\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name=Nastya&age=29&salary=1000",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nastya"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var resp = pm.response.json();\r",
							"\r",
							"var query = {};\r",
							"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});  \r",
							"\r",
							"pm.test(\"Name is OK\", function () {\r",
							"    pm.expect(resp.name).to.eql(query.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Age is OK\", function () {\r",
							"    pm.expect(resp.age).to.eql(+query.age);\r",
							"});\r",
							"\r",
							"console.log(pm.request.url.query.get(\"salary\"));\r",
							"\r",
							"console.log(resp.salary);\r",
							"console.log(resp.salary[0]);\r",
							"console.log(resp.salary[1]);\r",
							"console.log(resp.salary[2]);\r",
							"\r",
							"pm.test(\"Salary[0]=Salary from request\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(+query.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary[1]=Salary*2 from request\", function () {\r",
							"    pm.expect(+resp.salary[1]).to.eql(query.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary[2]=Salary*3 from request\", function () {\r",
							"    pm.expect(+resp.salary[2]).to.eql(query.salary*3);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"name\", resp.name);\r",
							"pm.environment.set(\"age\",resp.age);\r",
							"pm.environment.set(\"salary\", resp.salary);\r",
							"\r",
							"var sal = resp.salary;\r",
							"for (var prop in sal) {\r",
							"    console.log(sal[prop])\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Nastya&age=29&salary=1000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nastya"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var resp = pm.response.json();\r",
							"var req = request.data;\r",
							"\r",
							"pm.test(\"Start_qa_salary exists\", function() {\r",
							"pm.expect(resp).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"pm.test(\"Qa_salary_after_6_months exists\", function() {\r",
							"pm.expect(resp).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"pm.test(\"Qa_salary_after_12_months exists\", function() {\r",
							"pm.expect(resp).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"pm.test(\"Qa_salary_after_1.5_year exists\", function() {\r",
							"pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years exists\", function() {\r",
							"pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"pm.test(\"Person exists\", function() {\r",
							"pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"pm.test(\"Start_qa_salary=salary\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Qa_salary_after_6_months=salary*2\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"Qa_salary_after_12_months=salary*2.7\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(+req.salary*2.7);\r",
							"});\r",
							"\r",
							"pm.test(\"Qa_salary_after_1.5_year=salary*3.3\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary*3.3);\r",
							"});\r",
							"\r",
							"//console.log(resp[\"qa_salary_after_1.5_year\"]);\r",
							"\r",
							"pm.test(\"Qa_salary_after_3.5_years=salary*3.8\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary*3.8);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary from u_name = salary from req\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"U_age = age from req\", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"pm.test(\"U_salary_5_years = salary*4.2\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(+req.salary*4.2);\r",
							"});\r",
							"\r",
							"var prsn = resp.person;\r",
							"for (var prop in prsn) {\r",
							"    console.log(prop + \" = \" + prsn[prop])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
